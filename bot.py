import logging
import os
import requests
from bs4 import BeautifulSoup
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext, CallbackQueryHandler, MessageHandler, Filters
from tinydb import TinyDB, Query
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger

# Enable logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize database
scheduler = BackgroundScheduler()
scheduler.start()
db = TinyDB('movies_db.json')
User = Query()
TMDB_API_KEY = os.getenv("TMDB_API_KEY")  # Add your TMDB API key to the environment variables
ADMIN_ID = 558387  # Telegram ID of the bot administrator

# Define start command
def start(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —Ñ—ñ–ª—å–º", callback_data='add_movie')],
        [InlineKeyboardButton("üìú –°–ø–∏—Å–∫–∏ —Ñ—ñ–ª—å–º—ñ–≤", callback_data='list_movies')],
        [InlineKeyboardButton("üîç –ü–æ—à—É–∫ —Ñ—ñ–ª—å–º—É", callback_data='search_movie')],
        [InlineKeyboardButton("‚≠ê –û—Ü—ñ–Ω–∏—Ç–∏ —Ñ—ñ–ª—å–º", callback_data='rate_movie')],
        [InlineKeyboardButton("‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è", callback_data='set_reminder')],
        [InlineKeyboardButton("üïí –Ü—Å—Ç–æ—Ä—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤", callback_data='view_history')],
        [InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ñ—ñ–ª—å–º", callback_data='remove_movie')],
        [InlineKeyboardButton("üé¨ –ü–æ–ø—É–ª—è—Ä–Ω–µ –Ω–∞ Filmix", callback_data='filmix_popular')],
        [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–≤–æ—ó–º–∏ —Å–ø–∏—Å–∫–∞–º–∏ —Ñ—ñ–ª—å–º—ñ–≤. –û–±–µ—Ä–∏ –¥—ñ—é –∑ –º–µ–Ω—é:",
        reply_markup=reply_markup
    )

# Function to add a movie
def add_movie(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—É, —è–∫–∏–π –≤–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏.")

    def handle_message(update: Update, context: CallbackContext) -> None:
        movie_name = update.message.text
        db.insert({"type": "movie", "name": movie_name})
        update.message.reply_text(f"–§—ñ–ª—å–º '{movie_name}' –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É.")
        context.bot.remove_handler_by_name("message_handler")

    context.bot.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message), name="message_handler")

# Function to list movies
def list_movies(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    movies = db.search(User.type == 'movie')
    if not movies:
        query.edit_message_text("–í–∞—à —Å–ø–∏—Å–æ–∫ —Ñ—ñ–ª—å–º—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
    else:
        message = "–í–∞—à —Å–ø–∏—Å–æ–∫ —Ñ—ñ–ª—å–º—ñ–≤:\n" + "\n".join(f"- {movie['name']}" for movie in movies)
        query.edit_message_text(message)

# Function to search for a movie
def search_movie(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—É –¥–ª—è –ø–æ—à—É–∫—É.")

    def handle_message(update: Update, context: CallbackContext) -> None:
        movie_name = update.message.text
        response = requests.get(
            f"https://api.themoviedb.org/3/search/movie?api_key={TMDB_API_KEY}&query={movie_name}"
        )
        if response.status_code != 200:
            update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –ø–æ—à—É–∫. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            return

        results = response.json().get("results", [])
        if not results:
            update.message.reply_text("–§—ñ–ª—å–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        else:
            message = "–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É:\n" + "\n".join(f"- {movie['title']} ({movie['release_date']})" for movie in results[:5])
            update.message.reply_text(message)
        context.bot.remove_handler_by_name("message_handler")

    context.bot.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message), name="message_handler")

# Function to set a reminder
def set_reminder(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    query.edit_message_text("–í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—É —Ç–∞ –¥–∞—Ç—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD.")

    def handle_reminder(update: Update, context: CallbackContext) -> None:
        data = update.message.text.split(' ', 1)
        if len(data) != 2:
            update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: <–Ω–∞–∑–≤–∞ —Ñ—ñ–ª—å–º—É> <YYYY-MM-DD>")
            return
        movie_name, reminder_date = data
        scheduler.add_job(
            lambda: update.message.reply_text(f"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ '{movie_name}'!"),
            trigger=CronTrigger.from_crontab(f"0 9 {reminder_date}"),
        )
        update.message.reply_text(f"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞ '{movie_name}' –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminder_date}.")
        context.bot.remove_handler_by_name("reminder_handler")

    context.bot.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_reminder), name="reminder_handler")

# Function to remove a movie
def remove_movie(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")

    def handle_remove(update: Update, context: CallbackContext) -> None:
        movie_name = update.message.text
        db.remove((User.type == 'movie') & (User.name == movie_name))
        update.message.reply_text(f"–§—ñ–ª—å–º '{movie_name}' –≤–∏–¥–∞–ª–µ–Ω–æ –∑—ñ —Å–ø–∏—Å–∫—É.")
        context.bot.remove_handler_by_name("remove_handler")

    context.bot.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_remove), name="remove_handler")

# Fetch popular movies from Filmix
def filmix_popular(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()

    url = "https://filmix.my/popular/"
    response = requests.get(url)
    if response.status_code != 200:
        query.edit_message_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ñ —Ñ—ñ–ª—å–º–∏ –∑ Filmix. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    soup = BeautifulSoup(response.text, 'html.parser')
    movies = soup.find_all('div', class_='shortstory')[:5]

    if not movies:
        query.edit_message_text("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö —Ñ—ñ–ª—å–º—ñ–≤ –Ω–∞ Filmix.")
        return

    message = "üé¨ –ü–æ–ø—É–ª—è—Ä–Ω—ñ —Ñ—ñ–ª—å–º–∏ –Ω–∞ Filmix:\n"
    for movie in movies:
        title = movie.find('a', class_='shortstory__title').text.strip()
        link = movie.find('a', class_='shortstory__title')['href']
        message += f"- [{title}]({link})\n"

    query.edit_message_text(message, parse_mode="Markdown")

# Button handler
def button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()  # Acknowledge the callback

    # Actions based on callback_data
    if query.data == 'add_movie':
        add_movie(update, context)
    elif query.data == 'list_movies':
        list_movies(update, context)
    elif query.data == 'search_movie':
        search_movie(update, context)
    elif query.data == 'set_reminder':
        set_reminder(update, context)
    elif query.data == 'remove_movie':
        remove_movie(update, context)
    elif query.data == 'filmix_popular':
        filmix_popular(update, context)

# Main function
def main() -> None:
    # Check TELEGRAM_BOT_TOKEN
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –î–æ–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω —É –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")

    # Initialize bot
    updater = Updater(token)

    dispatcher = updater.dispatcher

    # Command handlers
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CallbackQueryHandler(button_handler))

    # Start the bot
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
